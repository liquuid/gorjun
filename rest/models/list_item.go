// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListItem list item
// swagger:model listItem
type ListItem struct {

	// archteture
	// Min Length: 1
	Archteture string `json:"archteture,omitempty"`

	// date
	// Min Length: 1
	Date []string `json:"date"`

	// description
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// filename
	// Min Length: 1
	Filename string `json:"filename,omitempty"`

	// hash
	// Min Length: 1
	Hash string `json:"hash,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// owner
	// Min Length: 1
	Owner string `json:"owner,omitempty"`

	// parent
	// Min Length: 1
	Parent string `json:"parent,omitempty"`

	// prefsize
	// Min Length: 1
	Prefsize string `json:"prefsize,omitempty"`

	// signature
	// Min Length: 1
	Signature string `json:"signature,omitempty"`

	// size
	// Min Length: 1
	Size []string `json:"size"`

	// tags
	// Min Length: 1
	Tags string `json:"tags,omitempty"`

	// timestamp
	// Min Length: 1
	Timestamp string `json:"timestamp,omitempty"`

	// version
	// Min Length: 1
	Version string `json:"version,omitempty"`
}

// Validate validates this list item
func (m *ListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchteture(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrefsize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListItem) validateArchteture(formats strfmt.Registry) error {

	if swag.IsZero(m.Archteture) { // not required
		return nil
	}

	if err := validate.MinLength("archteture", "body", string(m.Archteture), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	return nil
}

func (m *ListItem) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateFilename(formats strfmt.Registry) error {

	if swag.IsZero(m.Filename) { // not required
		return nil
	}

	if err := validate.MinLength("filename", "body", string(m.Filename), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := validate.MinLength("hash", "body", string(m.Hash), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := validate.MinLength("owner", "body", string(m.Owner), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if err := validate.MinLength("parent", "body", string(m.Parent), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validatePrefsize(formats strfmt.Registry) error {

	if swag.IsZero(m.Prefsize) { // not required
		return nil
	}

	if err := validate.MinLength("prefsize", "body", string(m.Prefsize), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateSignature(formats strfmt.Registry) error {

	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if err := validate.MinLength("signature", "body", string(m.Signature), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	return nil
}

func (m *ListItem) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.MinLength("tags", "body", string(m.Tags), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.MinLength("timestamp", "body", string(m.Timestamp), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListItem) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinLength("version", "body", string(m.Version), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListItem) UnmarshalBinary(b []byte) error {
	var res ListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
