// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// AptListURL generates an URL for the apt list operation
type AptListURL struct {
	ID       *int32
	Name     *string
	Owner    *string
	Subname  *string
	Tag      *string
	Token    *string
	Verified *bool
	Version  *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AptListURL) WithBasePath(bp string) *AptListURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AptListURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *AptListURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/kurjun/rest/apt/list"

	_basePath := o._basePath
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var id string
	if o.ID != nil {
		id = swag.FormatInt32(*o.ID)
	}
	if id != "" {
		qs.Set("id", id)
	}

	var name string
	if o.Name != nil {
		name = *o.Name
	}
	if name != "" {
		qs.Set("name", name)
	}

	var owner string
	if o.Owner != nil {
		owner = *o.Owner
	}
	if owner != "" {
		qs.Set("owner", owner)
	}

	var subname string
	if o.Subname != nil {
		subname = *o.Subname
	}
	if subname != "" {
		qs.Set("subname", subname)
	}

	var tag string
	if o.Tag != nil {
		tag = *o.Tag
	}
	if tag != "" {
		qs.Set("tag", tag)
	}

	var token string
	if o.Token != nil {
		token = *o.Token
	}
	if token != "" {
		qs.Set("token", token)
	}

	var verified string
	if o.Verified != nil {
		verified = swag.FormatBool(*o.Verified)
	}
	if verified != "" {
		qs.Set("verified", verified)
	}

	var version string
	if o.Version != nil {
		version = *o.Version
	}
	if version != "" {
		qs.Set("version", version)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *AptListURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *AptListURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *AptListURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on AptListURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on AptListURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *AptListURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
