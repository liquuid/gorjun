// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AptListHandlerFunc turns a function with the right signature into a apt list handler
type AptListHandlerFunc func(AptListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AptListHandlerFunc) Handle(params AptListParams) middleware.Responder {
	return fn(params)
}

// AptListHandler interface for that can handle valid apt list params
type AptListHandler interface {
	Handle(AptListParams) middleware.Responder
}

// NewAptList creates a new http.Handler for the apt list operation
func NewAptList(ctx *middleware.Context, handler AptListHandler) *AptList {
	return &AptList{Context: ctx, Handler: handler}
}

/*AptList swagger:route GET /kurjun/rest/apt/list gorjun apt list aptList

Info returns JSON formatted list of elements. It allows to apply some filters to Search.

*/
type AptList struct {
	Context *middleware.Context
	Handler AptListHandler
}

func (o *AptList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAptListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AptListDefaultBody apt list default body
// swagger:model AptListDefaultBody
type AptListDefaultBody interface{}
